REPORT  zrekl1.

DATA: GR_TABLE     TYPE REF TO CL_SALV_TABLE.
DATA: GR_COLUMNS   TYPE REF TO CL_SALV_COLUMNS_TABLE.
DATA: GR_COLUMN    TYPE REF TO CL_SALV_COLUMN_TABLE.
DATA: GR_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS.
data: gr_display_settings type ref to cl_salv_display_settings.
data: gr_layout  type ref to cl_salv_layout.
data: gr_selections type ref to cl_salv_selections.
data: gr_events type ref to cl_salv_events_table.
DATA: COLOR TYPE LVC_S_COLO.
data: key        type salv_s_layout_key.
Data: i_vbap TYPE STANDARD TABLE OF vbap.
*
*----------------------------------------------------------------------*
*       CLASS lcl_report DEFINITION
*----------------------------------------------------------------------*
CLASS automatitic_ALV DEFINITION.

  PUBLIC SECTION.

DATA: itab type standard table of mara,
i_conftab TYPE TABLE OF CONF_OUT,
wa_conftab TYPE conf_out,
wa_vbrp TYPE vbrp,
wa_vbap TYPE vbap,
wa_vbrk TYPE vbrk,
WA_LIPS TYPE lips,
wa_likp TYPE likp,
it_konv TYPE STANDARD TABLE OF konv,
wa_konv TYPE konv,
WA_VBPA TYPE vbpa,
wa_vbak TYPE vbak,
wa_aufk TYPE aufk,
wa_mseg TYPE mseg,
h_labour_perc TYPE f VALUE '0.15'.
*
*TYPES: BEGIN OF ty_vbap,
*  vbelv TYPE vbap-vbelv,
*  posnr TYPE vbap-posnr,
*  arktx TYPE vbap-arktx,
*  erdat TYPE vbak-erdat,
*END OF ty_vbap.
*
*DATA: wa_vbap TYPE ty_vbap, i_vbap TYPE STANDARD TABLE OF ty_vbap.


TYPES: BEGIN OF ty_rekl_data,
  matnr TYPE matnr,
  vbelv TYPE vbelv,
  posnr TYPE posnr,
  atnam TYPE atnam,
  atbez TYPE atbez,
  atwrt TYPE atwrt,
  billingdoc TYPE vbeln,
  billingpos TYPE posnr,
  reklprice TYPE kbetr,
  rekllabour TYPE kbetr,
  deliverynum TYPE vbeln,
  deliveryitem TYPE vbeln,
  soldto TYPE kunnr,
  soldtodesc TYPE name1,
  shipto TYPE kunnr,
  shiptodesc TYPE name1,
  createdby TYPE ernam,
  salesgroup TYPE VKGRP,
  goodsissuedate TYPE WADAT_IST,
  scol  TYPE lvc_t_scol,
  col   TYPE lvc_col,    " color 1-7
  int   TYPE lvc_int,    " intensified 0-1
  inv   TYPE lvc_inv,
  prodorder TYPE aufnr,
  prodbatch TYPE mseg-charg,
  salesgroupdesc TYPE bezei,
  shipcond TYPE VBAK-VSBED,
  shipconddesc TYPE vtext,
  requesteddate TYPE vbak-VDATU,
  ponumber TYPE vbak-BSTNK,
  matdesc TYPE vbap-arktx,
  finishdate TYPE afko-gltrs,
  salesordcreationdate TYPE erdat,
  salesordtracknr TYPE VBKD-IHREZ,
  rejection TYPE vbap-abgru,
END OF ty_rekl_data.

DATA: wa_rekl_data type ty_rekl_data.

DATA: i_rekl_data type standard table of ty_rekl_data.
DATA: i2_rekl_data type standard table of ty_rekl_data.

    DATA: o_alv TYPE REF TO cl_salv_table,
      alv               TYPE REF TO cl_gui_alv_grid,
      ccontrol          TYPE REF TO cl_gui_custom_container,
      functions         TYPE REF TO cl_salv_functions_list,
      ls_color   TYPE lvc_s_scol,
      lt_color   TYPE lvc_t_scol.

    METHODS:

      get_data,

      generate_output.
*            set_colors
*        CHANGING
*          co_alv  TYPE REF TO cl_salv_table
*          ct_rekl_data TYPE wa_rekl_data.

ENDCLASS.

class lcl_event_handler definition.

  public section.

    methods:
        on_user_command for event added_function of cl_salv_events
          importing e_salv_function.

endclass.                    "lcl_event_handler DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_event_handler IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class lcl_event_handler implementation.

  method on_user_command.
    perform handle_user_command using e_salv_function.
  endmethod.                    "on_user_command

endclass.

START-OF-SELECTION.
DATA: lo_report TYPE REF TO automatitic_ALV.
  parameters: p_matnr type matnr.
select-options s_date for sy-datum.
SELECTION-SCREEN: BEGIN OF BLOCK blk3 WITH FRAME TITLE blk3.


SELECTION-SCREEN: END OF BLOCK blk3.

*
  CREATE OBJECT lo_report.
*
  lo_report->get_data( ).
*
  lo_report->generate_output( ).

CLASS automatitic_ALV IMPLEMENTATION.




*
  METHOD get_data.

    SELECT vbelv posnr arktx FROM vbap INTO CORRESPONDING FIELDS OF wa_vbap WHERE matnr = p_matnr.
    SELECT erdat FROM vbak INTO CORRESPONDING FIELDS OF wa_vbap WHERE vbeln = wa_vbap-vbelv AND erdat IN s_date.
    APPEND wa_vbap TO i_vbap.
    ENDSELECT.
    ENDSELECT.



    LOOP AT i_vbap INTO wa_vbap.

    CLEAR: wa_vbrp, wa_vbrk, wa_konv, wa_lips, wa_vbak, wa_likp, wa_aufk, wa_mseg.

    SELECT cuobj FROM vbap INTO CORRESPONDING FIELDS OF wa_vbap WHERE vbelv = wa_vbap-vbelv.
    ENDSELECT.

    SELECT * FROM vbrp INTO wa_vbrp WHERE AUBEL = wa_vbap-vbelv AND AUPOS = wa_vbap-posnr.
    ENDSELECT.

    SELECT * FROM VBRK INTO wa_vbrk WHERE VBELN = wa_vbrp-vbeln.
    ENDSELECT.

    SELECT * FROM KONV INTO WA_KONV WHERE KNUMV = WA_VBRK-KNUMV AND KPOSN = WA_VBRP-POSNR AND KSCHL = 'ZPIC'.
    ENDSELECT.

    SELECT * FROM LIPS INTO WA_LIPS WHERE VGBEL = wa_vbap-vbelv AND VGPOS = wa_vbap-posnr.
    ENDSELECT.

    SELECT * FROM VBAK INTO WA_VBAK WHERE VBELN = wa_vbap-vbelv.
    ENDSELECT.

    SELECT * FROM LIKP INTO WA_LIKP WHERE VBELN = wa_lips-vbeln.
    ENDSELECT.


CLEAR: i_conftab.

IF NOT wa_vbap-cuobj IS INITIAL.

    CALL FUNCTION 'VC_I_GET_CONFIGURATION'
     EXPORTING
       INSTANCE = wa_vbap-cuobj
     TABLES
        CONFIGURATION = i_conftab.
ENDIF.

DATA: count type i VALUE 0.

CLEAR: count.

    LOOP AT i_conftab INTO wa_conftab.

    CLEAR: wa_mseg, wa_aufk.

    SELECT KUNNR FROM VBPA INTO wa_rekl_data-soldTo WHERE VBELN = wa_vbap-vbelv AND PARVW = 'AG'.
    ENDSELECT.

    SELECT BEZEI FROM TVGRT INTO wa_rekl_data-salesgroupdesc WHERE VKGRP = wa_vbak-VKGRP.
    ENDSELECT.

    SELECT vtext FROM tvsbt INTO wa_rekl_data-shipconddesc WHERE vsbed = wa_vbak-vsbed AND spras = 'E'.
    ENDSELECT.

    SELECT NAME1 FROM KNA1 INTO wa_rekl_data-soldToDesc WHERE KUNNR = wa_rekl_data-soldTo.
    ENDSELECT.

    SELECT KUNNR FROM VBPA INTO wa_rekl_data-shipTo WHERE VBELN = wa_vbap-vbelv AND PARVW = 'WE'.
    ENDSELECT.

    SELECT NAME1 FROM KNA1 INTO wa_rekl_data-shipToDesc WHERE KUNNR = wa_rekl_data-shipTo.
    ENDSELECT.

    SELECT IHREZ FROM VBKD INTO wa_rekl_data-salesordtracknr WHERE vbeln = wa_vbap-vbelv.
    ENDSELECT.

    SELECT * FROM AUFK INTO WA_AUFK WHERE KDAUF = wa_vbap-vbelv AND KDPOS = wa_vbap-posnr.
    ENDSELECT.

    IF NOT wa_aufk IS INITIAL.
    SELECT * FROM MSEG INTO wa_mseg WHERE AUFNR = wa_aufk-aufnr AND matnr = p_matnr AND bwart = '101'.
    ENDSELECT.
    SELECT gltrs FROM afko INTO wa_rekl_data-finishdate WHERE aufnr = wa_aufk-aufnr.
    ENDSELECT.
    ENDIF.

      count = count + 1.
      wa_rekl_data-vbelv = wa_vbap-vbelv.
      wa_rekl_data-rejection = wa_vbap-abgru.
      wa_rekl_data-createdBy = wa_vbak-ernam.
      wa_rekl_data-salesGroup = wa_vbak-VKGRP.
      wa_rekl_data-shipcond = wa_vbak-vsbed.
      wa_rekl_data-salesordcreationdate = wa_vbak-erdat.
      wa_rekl_data-requesteddate = wa_vbak-VDATU.
      wa_rekl_data-ponumber = wa_vbak-BSTNK.
      wa_rekl_data-matnr = p_matnr.
      wa_rekl_data-matdesc = wa_vbap-arktx.
      wa_rekl_data-goodsIssueDate = wa_likp-WADAT_IST.
      wa_rekl_data-posnr = wa_vbap-posnr.
      wa_rekl_data-atnam = wa_conftab-atnam.
      wa_rekl_data-atbez = wa_conftab-atbez.
      wa_rekl_data-atwrt = wa_conftab-atwrt.

      IF count = 1 AND NOT wa_konv-kbetr IS INITIAL.
      wa_rekl_data-reklPrice = wa_konv-kbetr.
      wa_rekl_data-reklLabour = wa_konv-kbetr * h_labour_perc.
      ELSE.
      wa_rekl_data-reklPrice = 0.
      wa_rekl_data-reklLabour = 0.
      ENDIF.

      IF wa_aufk IS INITIAL.
        wa_rekl_data-prodorder = 'No prod yet'.
      ELSE.
        wa_rekl_data-prodorder = wa_aufk-aufnr.
      ENDIF.

      IF wa_mseg IS  INITIAL.
        wa_rekl_data-prodbatch = 'No batch yet'.
      ELSE.
        wa_rekl_data-prodbatch = wa_mseg-charg.
      ENDIF.

      IF wa_lips IS INITIAL.
         wa_rekl_data-deliveryNum = 'No delivery yet'.
         wa_rekl_data-deliveryItem = 'No delivery yet'.
      ELSE.
         wa_rekl_data-deliveryNum = wa_lips-vbeln.
         wa_rekl_data-deliveryItem = wa_lips-posnr.
      ENDIF.

      IF wa_vbrp-vbeln IS INITIAL.
        wa_rekl_data-billingDoc = 'No billing document yet'.
        wa_rekl_data-billingPos = 'No billing document yet'.
      ELSE.
      wa_rekl_data-billingDoc = wa_vbrp-vbeln.
      wa_rekl_data-billingPos = wa_vbrp-posnr.
      ENDIF.

      wa_rekl_data-scol = lt_color.

      APPEND wa_rekl_data TO i_rekl_data.
      CLEAR: wa_rekl_data.
    ENDLOOP.

CLEAR: wa_vbrp, wa_vbrk, wa_vbap, wa_konv.
    ENDLOOP.
*
  ENDMETHOD.                    "get_data
*.......................................................................
  METHOD generate_output.

    DATA: lx_msg TYPE REF TO cx_salv_msg.
    data: o_event_handler type ref to lcl_event_handler.
    TRY.
        cl_salv_table=>factory(
          IMPORTING
            r_salv_table = gr_table
          CHANGING
            t_table      = i_rekl_data ).
      CATCH cx_salv_msg INTO lx_msg.
    ENDTRY.

    gr_table->set_screen_status(
    pfstatus      =  'SALV_STANDARD'
    report        =  sy-repid
    set_functions = gr_table->c_functions_all ).

    gr_functions = gr_table->get_functions( ).
    gr_functions->set_all( abap_true ).

    gr_display_settings = gr_table->get_display_settings( ).

    gr_columns = gr_table->get_columns( ).

    gr_selections = gr_table->get_selections( ).
    gr_selections->set_selection_mode( '4' ).

    gr_events = gr_table->get_event( ).

    create object o_event_handler.
    set handler o_event_handler->on_user_command for gr_events.

    gr_table->display( ).
*
  ENDMETHOD.                    "generate_output

ENDCLASS.                    "lcl_report IMPLEMENTATION



form handle_user_command using i_ucomm type salv_de_function.

  case i_ucomm.
    when 'GET_SEL'.

*     CALl METHOD (lcl_event_handler)=>(handle_doubleclick).

      perform get_selections.
  endcase.

endform.                    " handle_user_command



FORM GET_SELECTIONS.

data: lr_selections type ref to cl_salv_selections,
      lt_rows       type salv_t_row.

data: wa_vbap type vbap.
data: it_vbap type table of vbap.


data: wa_row TYPE i.

field-symbols:
<fs_table> type any table,
<fs_field> type any.

lr_selections = gr_table->get_selections( ).
lt_rows = lr_selections->get_selected_rows( ).
lr_selections->set_selected_rows( lt_rows ).

assign lt_rows to <fs_table>.

LOOP AT <fs_table> into wa_row.
    assign wa_row to <fs_field>.
    read table i_vbap into wa_vbap index <fs_field>.
ENDLOOP.




ENDFORM.